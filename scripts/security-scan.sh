#!/bin/bash

# Script de scan de s√©curit√© automatis√© pour Koumbaya
# Ce script lance plusieurs outils de s√©curit√© et g√©n√®re un rapport consolid√©

set -e

echo "üõ°Ô∏è  D√©marrage du scan de s√©curit√© Koumbaya"
echo "=================================================="

# Couleurs pour l'output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# R√©pertoire de base
BASE_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
REPORTS_DIR="$BASE_DIR/security-reports"

# Cr√©er le r√©pertoire des rapports
mkdir -p "$REPORTS_DIR"

# Date du scan
SCAN_DATE=$(date +"%Y-%m-%d_%H-%M-%S")
REPORT_FILE="$REPORTS_DIR/security-report-$SCAN_DATE.txt"

echo "üìÅ R√©pertoire des rapports: $REPORTS_DIR"
echo "üìÑ Rapport principal: $REPORT_FILE"
echo ""

# Fonction pour logger
log() {
    echo -e "$1" | tee -a "$REPORT_FILE"
}

# Header du rapport
{
    echo "RAPPORT DE S√âCURIT√â KOUMBAYA"
    echo "============================"
    echo "Date: $(date)"
    echo "Environnement: $(php artisan env)"
    echo "Version PHP: $(php --version | head -n1)"
    echo "Version Node: $(node --version)"
    echo ""
} > "$REPORT_FILE"

# 1. Tests PHP avec PHPUnit
log "${BLUE}1. üß™ Tests de s√©curit√© PHP...${NC}"
if command -v php >/dev/null 2>&1; then
    if [ -f "$BASE_DIR/vendor/bin/phpunit" ]; then
        php "$BASE_DIR/vendor/bin/phpunit" \
            --testsuite=Feature \
            --filter=Security \
            --verbose \
            >> "$REPORT_FILE" 2>&1
        
        if [ $? -eq 0 ]; then
            log "${GREEN}‚úÖ Tests PHP de s√©curit√© r√©ussis${NC}"
        else
            log "${RED}‚ùå √âchec des tests PHP de s√©curit√©${NC}"
        fi
    else
        log "${YELLOW}‚ö†Ô∏è  PHPUnit non trouv√© - installation des d√©pendances...${NC}"
        composer install --no-dev --optimize-autoloader
    fi
else
    log "${RED}‚ùå PHP non trouv√©${NC}"
fi

echo ""

# 2. Tests JavaScript avec Vitest
log "${BLUE}2. üß™ Tests de s√©curit√© JavaScript...${NC}"
if command -v npm >/dev/null 2>&1; then
    if [ -f "$BASE_DIR/package.json" ]; then
        cd "$BASE_DIR"
        npm test 2>&1 | tee -a "$REPORT_FILE"
        
        if [ ${PIPESTATUS[0]} -eq 0 ]; then
            log "${GREEN}‚úÖ Tests JavaScript de s√©curit√© r√©ussis${NC}"
        else
            log "${YELLOW}‚ö†Ô∏è  Avertissements dans les tests JavaScript${NC}"
        fi
    fi
else
    log "${RED}‚ùå NPM non trouv√©${NC}"
fi

echo ""

# 3. Analyse des d√©pendances PHP
log "${BLUE}3. üì¶ Analyse des d√©pendances PHP...${NC}"
if [ -f "$BASE_DIR/composer.json" ]; then
    composer audit --format=table >> "$REPORT_FILE" 2>&1
    
    if [ $? -eq 0 ]; then
        log "${GREEN}‚úÖ Aucune vuln√©rabilit√© trouv√©e dans les d√©pendances PHP${NC}"
    else
        log "${YELLOW}‚ö†Ô∏è  Vuln√©rabilit√©s trouv√©es dans les d√©pendances PHP${NC}"
    fi
fi

echo ""

# 4. Analyse des d√©pendances JavaScript
log "${BLUE}4. üì¶ Analyse des d√©pendances JavaScript...${NC}"
if [ -f "$BASE_DIR/package.json" ]; then
    cd "$BASE_DIR"
    npm audit --audit-level=moderate >> "$REPORT_FILE" 2>&1
    
    if [ $? -eq 0 ]; then
        log "${GREEN}‚úÖ Aucune vuln√©rabilit√© trouv√©e dans les d√©pendances JavaScript${NC}"
    else
        log "${YELLOW}‚ö†Ô∏è  Vuln√©rabilit√©s trouv√©es dans les d√©pendances JavaScript${NC}"
    fi
fi

echo ""

# 5. Analyse ESLint pour la s√©curit√©
log "${BLUE}5. üîç Analyse ESLint s√©curit√©...${NC}"
if [ -f "$BASE_DIR/.eslintrc.js" ] || [ -f "$BASE_DIR/eslint.config.js" ]; then
    cd "$BASE_DIR"
    npm run lint 2>&1 | tee -a "$REPORT_FILE"
    
    if [ ${PIPESTATUS[0]} -eq 0 ]; then
        log "${GREEN}‚úÖ Aucun probl√®me de s√©curit√© d√©tect√© par ESLint${NC}"
    else
        log "${YELLOW}‚ö†Ô∏è  Probl√®mes d√©tect√©s par ESLint${NC}"
    fi
fi

echo ""

# 6. V√©rification des permissions de fichiers
log "${BLUE}6. üîí V√©rification des permissions...${NC}"

# Fichiers qui ne doivent pas √™tre ex√©cutables
SHOULD_NOT_BE_EXECUTABLE=(
    ".env*"
    "*.php"
    "*.js"
    "*.vue"
    "*.json"
    "*.md"
)

# Fichiers sensibles qui ne doivent pas √™tre accessibles en lecture par tous
SENSITIVE_FILES=(
    ".env"
    ".env.local"
    ".env.production"
    "config/database.php"
    "storage/logs/*"
)

permission_issues=0

for pattern in "${SHOULD_NOT_BE_EXECUTABLE[@]}"; do
    find "$BASE_DIR" -name "$pattern" -type f -executable 2>/dev/null | while read -r file; do
        log "${YELLOW}‚ö†Ô∏è  Fichier ex√©cutable suspect: $file${NC}"
        permission_issues=$((permission_issues + 1))
    done
done

for pattern in "${SENSITIVE_FILES[@]}"; do
    find "$BASE_DIR" -name "$pattern" -type f -perm /004 2>/dev/null | while read -r file; do
        log "${YELLOW}‚ö†Ô∏è  Fichier sensible lisible par tous: $file${NC}"
        permission_issues=$((permission_issues + 1))
    done
done

if [ $permission_issues -eq 0 ]; then
    log "${GREEN}‚úÖ Permissions des fichiers correctes${NC}"
fi

echo ""

# 7. V√©rification de la configuration de s√©curit√©
log "${BLUE}7. ‚öôÔ∏è  V√©rification de la configuration...${NC}"

config_issues=0

# V√©rifier que debug est d√©sactiv√© en production
if [ -f "$BASE_DIR/.env" ]; then
    if grep -q "APP_DEBUG=true" "$BASE_DIR/.env" && grep -q "APP_ENV=production" "$BASE_DIR/.env"; then
        log "${RED}‚ùå DEBUG activ√© en production${NC}"
        config_issues=$((config_issues + 1))
    fi
    
    # V√©rifier la pr√©sence d'une cl√© d'application
    if ! grep -q "APP_KEY=base64:" "$BASE_DIR/.env"; then
        log "${YELLOW}‚ö†Ô∏è  Cl√© d'application manquante ou mal format√©e${NC}"
        config_issues=$((config_issues + 1))
    fi
    
    # V√©rifier HTTPS en production
    if grep -q "APP_ENV=production" "$BASE_DIR/.env" && ! grep -q "FORCE_HTTPS=true" "$BASE_DIR/.env"; then
        log "${YELLOW}‚ö†Ô∏è  HTTPS non forc√© en production${NC}"
        config_issues=$((config_issues + 1))
    fi
fi

if [ $config_issues -eq 0 ]; then
    log "${GREEN}‚úÖ Configuration de s√©curit√© correcte${NC}"
fi

echo ""

# 8. Recherche de secrets dans le code
log "${BLUE}8. üîê Recherche de secrets expos√©s...${NC}"

secret_patterns=(
    "password\s*=\s*['\"][^'\"]*['\"]"
    "secret\s*=\s*['\"][^'\"]*['\"]"
    "api_key\s*=\s*['\"][^'\"]*['\"]"
    "token\s*=\s*['\"][^'\"]*['\"]"
    "-----BEGIN.*PRIVATE.*KEY-----"
    "AKIA[0-9A-Z]{16}"  # AWS Access Key
)

secrets_found=0

for pattern in "${secret_patterns[@]}"; do
    grep -r -i -E "$pattern" "$BASE_DIR" \
        --exclude-dir=node_modules \
        --exclude-dir=vendor \
        --exclude-dir=.git \
        --exclude="*.log" \
        --exclude="security-scan.sh" \
        2>/dev/null | while read -r match; do
            log "${RED}‚ùå Secret potentiel trouv√©: $match${NC}"
            secrets_found=$((secrets_found + 1))
        done
done

if [ $secrets_found -eq 0 ]; then
    log "${GREEN}‚úÖ Aucun secret expos√© d√©tect√©${NC}"
fi

echo ""

# 9. Test des endpoints de s√©curit√©
log "${BLUE}9. üåê Test des endpoints de s√©curit√©...${NC}"

if command -v curl >/dev/null 2>&1; then
    # Tester la pr√©sence des headers de s√©curit√©
    BASE_URL="http://localhost:8000"  # Ajuster selon la configuration
    
    SECURITY_HEADERS=(
        "X-Content-Type-Options"
        "X-Frame-Options" 
        "X-XSS-Protection"
        "Content-Security-Policy"
    )
    
    for header in "${SECURITY_HEADERS[@]}"; do
        if curl -s -I "$BASE_URL" | grep -i "$header" > /dev/null; then
            log "${GREEN}‚úÖ Header $header pr√©sent${NC}"
        else
            log "${YELLOW}‚ö†Ô∏è  Header $header manquant${NC}"
        fi
    done
else
    log "${YELLOW}‚ö†Ô∏è  cURL non disponible - impossible de tester les endpoints${NC}"
fi

echo ""

# 10. G√©n√©ration du r√©sum√©
log "${BLUE}10. üìä G√©n√©ration du r√©sum√©...${NC}"

{
    echo ""
    echo "R√âSUM√â DU SCAN DE S√âCURIT√â"
    echo "========================="
    echo "Scan termin√© le: $(date)"
    echo ""
    
    # Compter les diff√©rents types d'issues
    error_count=$(grep -c "‚ùå" "$REPORT_FILE" || echo "0")
    warning_count=$(grep -c "‚ö†Ô∏è" "$REPORT_FILE" || echo "0")
    success_count=$(grep -c "‚úÖ" "$REPORT_FILE" || echo "0")
    
    echo "R√©sultats:"
    echo "  ‚úÖ Succ√®s: $success_count"
    echo "  ‚ö†Ô∏è  Avertissements: $warning_count"
    echo "  ‚ùå Erreurs: $error_count"
    echo ""
    
    if [ $error_count -gt 0 ]; then
        echo "üö® ATTENTION: Des vuln√©rabilit√©s critiques ont √©t√© d√©tect√©es!"
        echo "   Veuillez corriger les erreurs avant le d√©ploiement."
    elif [ $warning_count -gt 0 ]; then
        echo "‚ö†Ô∏è  Des am√©liorations de s√©curit√© sont recommand√©es."
    else
        echo "‚úÖ Aucun probl√®me de s√©curit√© critique d√©tect√©!"
    fi
    
    echo ""
    echo "Rapport complet sauvegard√© dans: $REPORT_FILE"
    
} >> "$REPORT_FILE"

# Afficher le r√©sum√© √† l'√©cran aussi
tail -n 20 "$REPORT_FILE"

# Code de sortie bas√© sur les erreurs
if [ $error_count -gt 0 ]; then
    echo ""
    log "${RED}üö® Scan termin√© avec des erreurs critiques!${NC}"
    exit 1
elif [ $warning_count -gt 0 ]; then
    echo ""
    log "${YELLOW}‚ö†Ô∏è  Scan termin√© avec des avertissements.${NC}"
    exit 2
else
    echo ""
    log "${GREEN}‚úÖ Scan de s√©curit√© r√©ussi!${NC}"
    exit 0
fi